--- open.c	2024-04-16 17:58:25.044246149 -0400
+++ open_patched.c	2024-04-29 11:16:03.489424805 -0400
@@ -1,13 +1,12 @@
 #include <string.h>
-#include "crypto_sign.h"
-#include "crypto_hash_sha512.h"
-#include "crypto_verify_32.h"
+#include "sha512/sha512.h"
+#include "verify32/verify.h"
 #include "ge.h"
 #include "sc.h"
 
-int crypto_sign_open(
-  unsigned char *m,unsigned long long *mlen,
-  const unsigned char *sm,unsigned long long smlen,
+// Verify a signed message using pk. Returns 0 iff the signature is valid under pk, otherwise returns != 0
+int ed25519_verify(
+  unsigned char *sm, const unsigned long long smlen,
   const unsigned char *pk
 )
 {
@@ -19,30 +18,31 @@ int crypto_sign_open(
   ge_p3 A;
   ge_p2 R;
 
-  if (smlen < 64) goto badsig;
-  if (sm[63] & 224) goto badsig;
-  if (ge_frombytes_negate_vartime(&A,pk) != 0) goto badsig;
-
-  memmove(pkcopy,pk,32);
-  memmove(rcopy,sm,32);
-  memmove(scopy,sm + 32,32);
-
-  memmove(m,sm,smlen);
-  memmove(m + 32,pkcopy,32);
-  crypto_hash_sha512(h,m,smlen);
+  if (smlen < 64) {
+		return -1;
+	}
+  if (sm[63] & 224) {
+		return -1;
+	}
+  if (ge_frombytes_negate_vartime(&A,pk) != 0) {
+		return -1;
+	}
+
+  memmove(pkcopy, pk, 32);
+  memmove(rcopy, sm, 32);
+  memmove(scopy, sm + 32, 32);
+
+	{
+		memmove(sm + 32, pkcopy, 32);
+		crypto_hash_sha512(h, sm,smlen);
+		memmove(sm + 32, scopy, 32); // Restore sm[32:64] so sm is intact after returning
+	}
   sc_reduce(h);
 
   ge_double_scalarmult_vartime(&R,h,&A,scopy);
   ge_tobytes(rcheck,&R);
   if (crypto_verify_32(rcheck,rcopy) == 0) {
-    memmove(m,m + 64,smlen - 64);
-    memset(m + smlen - 64,0,64);
-    *mlen = smlen - 64;
     return 0;
   }
-
-badsig:
-  *mlen = -1;
-  memset(m,0,smlen);
-  return -1;
+	return -1;
 }
